spring:
  application:
    name: larica
  datasource:
    url: jdbc:postgresql://144.22.152.131:5432/db_restaurante
    username: restaurante_user
    password: secure_password
    driver-class-name: org.postgresql.Driver
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  security:
    oauth2:
      client:
        registration:
          keycloak:
            client-id: firmas-food
            client-secret: "**********"
            scope: openid, profile, email
        provider:
          keycloak:
            issuer-uri: http://localhost:9081/realms/firmas-food-dev
      resourceserver:
        Jwk-set-uri: http://localhost:9081/realms/firmas-food-dev/protocol/openid-connect/certs
        jwt:
          issuer-uri: http://localhost:9081/realms/firmas-food-dev

server:
  port: 8081

keycloak:
  credentials:
    secret: "**********"
  resource: admin-cli
  auth-server-url:  http://localhost:9081
  realm: firmas-food-dev
  token-url: ${spring.security.oauth2.client.provider.keycloak.issuer-uri}/protocol/openid-connect
  use-resource-role-mappings: true
  policy-enforcer-config:
    enforcement-mode: ENFORCING
    http-method-as-scope: true
    lazy-load-paths: true
    paths:
      - name: pratos
        path: /api/pratos/{id}
        methods:
          - method: GET
            scopes:
              - View
  token:
    endpoint: ${spring.security.oauth2.client.provider.keycloak.issuer-uri}/protocol/openid-connect

api:
  security:
    token:
      secret: ${JWT_SECRET:chave-jwt}
      expiration-time:
        token: 60
        refresh-token: 120
      issuer: auth-api
      restaurante-claim: restaurante

logging:
  level:
    sql: debug
    org.hibernate.orm.jdbc.bind: trace